#!/bin/bash
#
# Usage:
#   rlaunch OPTIONS [-- QEMU_ARGS]
# Options:
#   -q PORT         change qemu monitor port (default is 4444)
#   -n VNC_DISPLAY  set up VNC and run client
#   -h HOST_NAME    host name
#   -b BUILD_PATH   build folder name on host
#   -i IMAGE_PATH   image folder name on host
#   -m QEMU_MEMORY  qemu memory
#   -t TYPE         qemu type:
#                      kvm       kvm
#                      kvm-cp    kvm with a copy of disk image
#                      qemu      qemu
#                      s2e       s2e-qemu
#                      s2e-gdb   s2e-qemu in GDB
# Example:
#   rlaunch -n 7 -h dslab-vader1.epfl.ch -b '~/workspace/build' -i '~/workspace/image' -m 1G -t s2e -- --s2e-verbose
#

set -e -u

#
#
#

QPORT=4444
VNC=-1
S2E_OPTS=""
SSH_OPTS=""

BUILDTYPE="debug"
SP=""

OPTIND=1
while getopts "q:n:h:b:i:m:t:VUs" opt; do
	case "$opt" in
		q)
			QPORT=${OPTARG}
			;;
		n)
			VNC=${OPTARG}
			VNCPORT=$((5900+${VNC}))
			;;
		h)
			REMOTE_HOST=${OPTARG}
			;;
		b)
			REMOTE_BUILD=${OPTARG}
			;;
		i)
			REMOTE_IMAGE=${OPTARG}
			;;
		m)
			QEMU_MEMORY=${OPTARG}
			;;
		t)
			TYPE=${OPTARG}
			;;
		V)
			S2E_OPTS+=" --s2e-verbose"
			;;
		U)
			S2E_OPTS+=" --s2e-unbuffered-stream"
			;;
		s)
			SP='_sp'
			;;
	esac
done
shift $((OPTIND-1))

QEMU_ARGS=$*

#
#
#

# set up environment
CMD=
CMD+="export IMAGE=${REMOTE_IMAGE}          &&"
CMD+="export BUILD=${REMOTE_BUILD}          &&"
CMD+="export S2E_PAYLOAD=\${IMAGE}          &&"
CMD+="export WINDOWS_FS=\${IMAGE}/guestfs   &&"
CMD+="mkdir -p \${IMAGE}/out                &&"
CMD+="cd \${IMAGE}/out                      &&"

case ${TYPE} in
	kvm|kvm-cp)
		CMD+=" qemu-system-x86_64"
		CMD+=" -enable-kvm"
		CMD+=" -net nic,model=pcnet -net user"
		if [ ${TYPE} == 'kvm' ]; then
			CMD+=" -drive file=\${IMAGE}/image.raw.s2e"
		else
			CMD+=" -drive file=\${IMAGE}/image.raw.s2e.copy"
		fi
		;;
	qemu)
		CMD+=" \${BUILD}/qemu-${BUILDTYPE}/x86_64-softmmu/qemu-system-x86_64"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none"
		;;
	s2e|s2e-gdb)
		if [ ${TYPE} == 's2e-gdb' ]; then
			CMD+="truncate -s0 gdb.cfg                   &&"
			CMD+="echo 'handle SIG38 noprint' >> gdb.cfg &&"
			CMD+="echo 'run'                  >> gdb.cfg &&"
			CMD+="gdb -x gdb.cfg --args"
		fi
		CMD+=" \${BUILD}/qemu-${BUILDTYPE}/x86_64-s2e${SP}-softmmu/qemu-system-x86_64"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none -net nic,model=pcnet"
		CMD+=" -s2e-config-file \${IMAGE}/s2e-config.lua"
		CMD+=" -loadvm ready"
		;;
	*)
		echo 'Invalid target type'; exit 1
		;;
esac

# add common qemu options
CMD+=" -m ${QEMU_MEMORY}"
CMD+=" -serial file:serial.txt"
CMD+=" -monitor telnet:localhost:${QPORT},server,nowait"
CMD+=" -usb -device usb-tablet -k en-us"
if [ ${VNC} -ne -1 ]; then
	CMD+=" -vnc :${VNC}"
else
	CMD+=" -nographic"
fi
CMD+=" ${S2E_OPTS}"
CMD+=" ${QEMU_ARGS}"

close_qemu()
{
	echo 'Closing QEMU'

	trap - INT

	ssh ${REMOTE_HOST} "
	expect <<-EOF
		set send_slow {1 .01}
		log_user 0
		spawn telnet localhost ${QPORT}
		expect {
			\"(qemu) \"
		}
		send -s \"q\n\n\"
		send_user \"\n\"
	EOF"
}

#
#
#

# start VNC connection loop
if [ ${VNC} -ne -1 ]; then
	SSH_OPTS+=" -o ExitOnForwardFailure=yes -L ${VNCPORT}:localhost:${VNCPORT}"

	VNCLOOP=
	VNCLOOP+="for i in {0..19}; do"
	VNCLOOP+=" echo 'Connecting to VNC display ${VNC}...';"
	VNCLOOP+=" ssh ${REMOTE_HOST} 'netstat -lnt' | grep ${VNCPORT} > /dev/null && break;"
	VNCLOOP+=" sleep 0.5;"
	VNCLOOP+="done;"
	VNCLOOP+="vncviewer localhost:${VNC} >/dev/null 2>&1;"

	bash -c "${VNCLOOP}" &
	VNCLOOP_PID=$!
fi

# quit qemu on Ctrl+C
trap close_qemu INT

# launch qemu on remote host
ssh ${SSH_OPTS} ${REMOTE_HOST} "${CMD}" || true

# kill VNC connection loop
if [ ${VNC} -ne -1 ]; then
	echo 'Closing VNC'
	kill ${VNCLOOP_PID} 2>/dev/null || true
fi

