#!/bin/bash
#
# Usage:
#   rlaunch OPTIONS [-- QEMU_ARGS]
# Options:
#   -q PORT         change qemu monitor port (default is 4444)
#   -n VNC_DISPLAY  set up VNC and run client
#   -h HOST_NAME    host name
#   -b BUILD_PATH   build folder name on host
#   -i IMAGE_PATH   image folder name on host
#   -m QEMU_MEMORY  qemu memory
#   -t TYPE         qemu type:
#   -r PORT         redirect SSH port to localhost:PORT
#                      kvm       qemu provided by system in KVM mode, will modify base image
#                      qemu      qemu
#                      qemu-kvm  qemu in KVM mode
#                      s2e       s2e-qemu
#                      s2e-gdb   s2e-qemu in GDB
#   -v              verbose option
#   -u              unbuffered stream option
#   -s              use single path s2e
#   -x              use x86_64 binary
#   -A              do not use usb device (used to make CGC image)
# Example:
#   rlaunch -n 7 -h dslab-vader1.epfl.ch -b '~/workspace/build' -i '~/workspace/image' -m 1G -t s2e -- --s2e-verbose
#

set -e -u

#
#
#

QPORT=4444
VNC=-1
S2E_OPTS=""
SSH_OPTS=""

BUILDTYPE="debug"
BUILDTYPE="release"

SP=""
ARCH="i386"
SSH_REDIR=-1
USB="-usb -device usb-tablet"

OPTIND=1
while getopts "q:n:h:b:i:m:t:r:vusxA" opt; do
	case "$opt" in
		q)
			QPORT=${OPTARG}
			;;
		n)
			VNC=${OPTARG}
			VNCPORT=$((5900+${VNC}))
			;;
		h)
			REMOTE_HOST=${OPTARG}
			;;
		b)
			REMOTE_BUILD=${OPTARG}
			;;
		i)
			REMOTE_IMAGE=${OPTARG}
			;;
		m)
			QEMU_MEMORY=${OPTARG}
			;;
		t)
			TYPE=${OPTARG}
			;;
    r)
      SSH_REDIR=${OPTARG}
      ;;
		v)
			S2E_OPTS+=" --s2e-verbose"
			;;
		u)
			S2E_OPTS+=" --s2e-unbuffered-stream"
			;;
		s)
			SP='_sp'
			;;
    x)
      ARCH='x86_64'
      ;;
    A)
      USB=""
      ;;
	esac
done
shift $((OPTIND-1))

QEMU_ARGS=$*

#
#
#

# set up environment
CMD=
CMD+="export IMAGE=${REMOTE_IMAGE}          &&"
CMD+="export BUILD=${REMOTE_BUILD}          &&"
CMD+="export S2E_PAYLOAD=\${IMAGE}          &&"
CMD+="export WINDOWS_FS=\${IMAGE}/guestfs   &&"
CMD+="mkdir -p \${IMAGE}/out                &&"
CMD+="cd \${IMAGE}/out                      &&"

case ${TYPE} in
	kvm)
		CMD+=" qemu-system-${ARCH}"
		CMD+=" -enable-kvm"
		CMD+=" -net nic,model=e1000 -net user"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e"
		;;
	qemu|qemu-kvm)
		CMD+=" \${BUILD}/qemu-${BUILDTYPE}/${ARCH}-softmmu/qemu-system-${ARCH}"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none -net nic,model=e1000"
		if [ ${TYPE} == 'qemu-kvm' ]; then
			CMD+=" -enable-kvm -enable-serial-commands -serial file:/tmp/serial.txt"
		fi
		;;
	s2e|s2e-gdb)
		if [ ${TYPE} == 's2e-gdb' ]; then
			CMD+="truncate -s0 gdb.cfg                          &&"
			CMD+="echo 'handle SIG38 noprint'        >> gdb.cfg &&"
			CMD+="echo 'set follow-fork-mode child'  >> gdb.cfg &&"
			CMD+="echo 'set detach-on-fork off'      >> gdb.cfg &&"
			CMD+="echo 'run'                         >> gdb.cfg &&"
			CMD+="gdb -x gdb.cfg --args"
		fi
		CMD+=" \${BUILD}/qemu-${BUILDTYPE}/${ARCH}-s2e${SP}-softmmu/qemu-system-${ARCH}"
		CMD+=" -drive file=\${IMAGE}/image.raw.s2e,cache=writeback,format=s2e"
		CMD+=" -net none -net nic,model=e1000"
		CMD+=" -s2e-config-file \${IMAGE}/s2e-config.lua"
		CMD+=" -loadvm ready"
		;;
	*)
		echo 'Invalid target type'; exit 1
		;;
esac

# add common qemu options
CMD+=" -m ${QEMU_MEMORY}"
CMD+=" -serial file:serial.txt"
CMD+=" -monitor telnet:localhost:${QPORT},server,nowait"
CMD+=" ${USB} -k en-us"
if [ ${VNC} -ne -1 ]; then
	CMD+=" -vnc :${VNC}"
else
	CMD+=" -nographic"
fi
if [ ${SSH_REDIR} -ne -1 ]; then
  CMD+=" -redir tcp:${SSH_REDIR}::22"
fi
CMD+=" ${S2E_OPTS}"
CMD+=" ${QEMU_ARGS}"

close_qemu()
{
	echo 'Closing QEMU'

	trap - INT

	ssh ${REMOTE_HOST} "
	expect <<-EOF
		set send_slow {1 .01}
		log_user 0
		spawn telnet localhost ${QPORT}
		expect {
			\"(qemu) \"
		}
		send -s \"termpg\n\n\"
		send -s \"q\n\n\"
		send_user \"\n\"
	EOF"
}

#
#
#

# start VNC connection loop
if [ ${VNC} -ne -1 ]; then
	SSH_OPTS+=" -o ExitOnForwardFailure=yes -L ${VNCPORT}:localhost:${VNCPORT}"

	VNCLOOP=
	VNCLOOP+="for i in {0..19}; do"
	VNCLOOP+=" echo 'Connecting to VNC display ${VNC}...';"
	VNCLOOP+=" ssh ${REMOTE_HOST} 'netstat -lnt' | grep ${VNCPORT} > /dev/null && break;"
	VNCLOOP+=" sleep 0.5;"
	VNCLOOP+="done;"
	VNCLOOP+="vncviewer localhost:${VNC} >/dev/null 2>&1;"

	bash -c "${VNCLOOP}" &
	VNCLOOP_PID=$!
fi

# quit qemu on Ctrl+C
trap close_qemu INT

# launch qemu on remote host
ssh ${SSH_OPTS} ${REMOTE_HOST} "${CMD}" || true

# kill VNC connection loop
if [ ${VNC} -ne -1 ]; then
	echo 'Closing VNC'
	kill ${VNCLOOP_PID} 2>/dev/null || true
fi

